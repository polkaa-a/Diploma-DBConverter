package dto.postgresql;

import conversion.types.enums.PostgreSQLTypes;
import dto.base.FieldDTO;
import lombok.Getter;
import lombok.NonNull;

@Getter
public class PostgreSQLFieldDTO extends FieldDTO {
    @NonNull
    private final PostgreSQLTypes type;
    @NonNull
    private final boolean isPK;
    //can be null if field doesn't have foreign key
    private final PostgreSQLForeignKeyDTO FK;
    @NonNull
    private boolean isAutogenerated;

    public PostgreSQLFieldDTO(String name,
                              PostgreSQLTypes type,
                              boolean isPK,
                              PostgreSQLForeignKeyDTO FK,
                              PostgreSQLTableDTO tableDTO) {
        super(name, tableDTO);
        this.type = type;
        this.isPK = isPK;
        this.FK = FK;
        isAutogenerated = false;
    }

    //if field is autogenerated (not from source database)
    public void setAutogeneratedFlag() {
        isAutogenerated = true;
    }

    @Override
    public Object getValue() {
        return null;
    }

    //by name and type
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        PostgreSQLFieldDTO fieldDTO = (PostgreSQLFieldDTO) o;

        return type == fieldDTO.type;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + type.hashCode();
        return result;
    }
}

